PROMPT="===========================================================
[%M] %10c (%?) $ "

setopt completealiases
setopt append_history
setopt share_history
setopt histignorealldups
setopt nobeep
setopt interactivecomments

zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|[._-:=]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' max-errors 5 numeric
zstyle ':completion:*' menu select
zstyle :compinstall filename '/home/vk/.zshrc'

autoload -Uz compinit
compinit
HISTFILE=~/.histfile
HISTSIZE=100000
SAVEHIST=1000000
setopt appendhistory autocd extendedglob
bindkey -v

autoload edit-command-line; zle -N edit-command-line
bindkey -M vicmd v edit-command-line

bindkey '\e[3~' delete-char
bindkey '^R' history-incremental-search-backward

# Spelling mistaeks happen.
alias v='vim -p'
alias c='vim -p'
alias nin='ninja'
alias ninha='ninja'
alias l='ls'
alias sl='ls'

# Git.
alias g='git'
alias gst='git status'
alias gco='git checkout'
alias gcp='git cherry-pick'
alias squash='git commit --amend -C @'
alias gg='git grep'

# AWS.
alias aws='/Users/vsk/Library/Python/2.7/bin/aws'
alias blobby='aws --endpoint-url https://blob.mr3.simcloud.apple.com --cli-read-timeout 300'

# Grab the first column of the input, using ":" as the column separator.
alias fst='cut -d":" -f1 | uniq | grep -vE "\.pyc$|Binary "'

# Edit files matching a git-grep search.
edit() { v $(gg -l $*) }

# Edit a file found with fzf.
editf() { v $(fzf) }

# Move to a directory found with fzf.
cdf() { cd $(dirname $(fzf)) }

llvm_build_dir() {
  src_dir=$(pwd | grep -Eo "$HOME/src/[^/]+")
  src_label=$(basename $src_dir)
  echo "$HOME/src/builds/$src_label-$1"
}

# Move to the build directory corresponding to the current source directory.
cdb() {
  cd $(llvm_build_dir $1)
}

# Return the source directory corresponding to the current build directory.
# Optionally drill down into a source subdirectory specified in $1.
srcs() {
  build_dir=$(pwd | grep -Eo "$HOME/src/builds/[^/]+")
  src_label=$(basename $build_dir | sed -E 's/-(R|D)A?//g' | sed -E 's/-(SAN|stage2|all)//g')
  src_dir="$HOME/src/$src_label"
  echo "$src_dir/$1"
}

# Move to the source directory corresponding to the current build directory.
cds() { cd $(srcs $*) }

configure_monorepo() {
  build_dir=$(llvm_build_dir $1)
  mkdir -p $build_dir || return
  cd $build_dir
  src_dir=$(srcs llvm)
  llvm_cmake_configure="xcrun cmake -G Ninja $src_dir -DCLANG_ENABLE_ARCMT=Off -DCLANG_ENABLE_STATIC_ANALYZER=Off -DLLVM_ENABLE_PROJECTS='clang;clang-tools-extra;libcxx;libcxxabi;compiler-rt;libunwind;lldb' -DLLVM_CCACHE_BUILD=1 -DLLDB_USE_SYSTEM_DEBUGSERVER=On -DCOMPILER_RT_ENABLE_IOS=0 -DCOMPILER_RT_ENABLE_WATCHOS=0 -DCOMPILER_RT_ENABLE_TVOS=0"
  if [[ "$1" == "RA" ]]; then
     llvm_cmake_configure="$llvm_cmake_configure -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=On"
  elif [[ "$1" == "R" ]]; then
     llvm_cmake_configure="$llvm_cmake_configure -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=Off"
  elif [[ "$1" == "D" ]]; then
     llvm_cmake_configure="$llvm_cmake_configure -DCMAKE_BUILD_TYPE=Debug -DLLVM_ENABLE_ASSERTIONS=On"
  else
    echo "Don't know how to configure $1."
    rm -rf $build_dir
    return
  fi
  echo ":: $llvm_cmake_configure"
  eval "$llvm_cmake_configure"
}

# Print out SIL function decls along with SIL debug locations.
sil_locations() { grep -Eo 'sil [^@]*@[^ ]+|loc "[^"]+":\d+:\d+' $* | sed -E 's/"[^"]+"://g' }

# Sum the numbers in a column of input.
sumcol() { awk "{ sum += \$$1 } END { print sum }" }

# Average the numbers in a column of input.
avgcol() {
	awk -f ~/scripts/avg.awk -v col=$1
}

# Create a histogram by sorting & uniq'ing the input.
histo() {
	sort | uniq -c | sort -k1 -n | awk 'BEGIN { idx = 0; total = 0; } { lines[idx] = $0; count[idx] = $1; total += $1; idx += 1; } END { cumul = 0; for (i = 0; i < idx; i++) { pctg = 100*count[i]/total; cumul += pctg; printf("%.2f%%\t%.2f%%\t%s\n", cumul, pctg, lines[i]); } }'
}

# Display call trees for non-object allocations given a MSL-enabled memgraph. Usage: <memgraph> <class> <invert-flag-or-none>.
msl_stacks() {
	if [[ ! -e "$1" || -z "$2" ]]; then
		echo "Usage: <memgraph> <class> <invert-flag-or-none>"
	else
		filter="/^0x.*: $2/ { print \$1 }"
		malloc_history $1 -callTree -consolidateAllBySymbol $3 $(heap --addresses=all $1 | awk -F ':' "$filter" | tr '\n' ' ') | grep -v "backtraces for"
	fi
}

# Pretty-print "squashed" JSON read from stdin. Removes Python `u` Unicode prefixes.
ppjson() { python -c "import json, pprint; pprint.pprint(json.loads(raw_input()))" | sed -E "s/u'([^']*)'/ '\1'/g" }

# Apple buildit.
alias rcbuild='~rc/bin/buildit'

# Handling remote sessions.
alias ssh="caffeinate ssh"
alias tmux="caffeinate tmux -2"
alias t="tmux"
alias ta="tmux attach -t"
alias clip="nc localhost 8377"
alias agent='eval $(keychain --eval --agents ssh -Q --quiet id_rsa)'

# System settings.

# Core files.
# ulimit -c unlimited

# Need to increase the open file limit.
ulimit -n 2048

export EDITOR=vim
export EMAIL=vsk@apple.com
export REPLYTO=$EMAIL

export PATH=/Applications/OSEng.app/Contents/Developer/usr/local/bin/:$PATH
export PATH=~/scripts:$PATH
export PATH=~/src/llvm-project-master/llvm/utils/git-svn/:$PATH
